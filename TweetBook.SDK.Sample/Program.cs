using Refit;
using System;
using System.Threading.Tasks;
using TweetBook.Contracts.V1.Request.Auth;
using TweetBook.Contracts.V1.Request.Post;
using TweetBook.SDK;

public class Program
{
    public static async Task Main(string[] args)
    {
        var cachedToken = string.Empty;

        var identityApi = RestService.For<IIdentityApi>("https://localhost:5001/");
        var tweetbookApi = RestService.For<ITweetBookApi>("https://localhost:5001/", new RefitSettings
        {
            AuthorizationHeaderValueGetter = () => Task.FromResult(cachedToken),
        });

        var registerResponse = await identityApi.RegisterAsync(new UserRegistrationRequest
        {
            Email = "sdkaccount@gmail.com",
            Password = "Test123!"
        });

        var loginResponse = await identityApi.LoginAsync(new UserLoginRequest
        {
            Email = "sdkaccount@gmail.com",
            Password = "Test123!"
        });

        cachedToken = loginResponse.Content?.Token;

        var allPosts = await tweetbookApi.GetAllAsync();

        var createdPost = await tweetbookApi.CreateAsync(new CreatePostRequest
        {
            Title = "Created by SDK",
            Content = "This post was created using autogenerated sdk by refit",
            Tags = new[] { "super", "refit", "sdk" }
        });

        var retrievePost = await tweetbookApi.UpdateAsync(createdPost.Content.Data.Id, new UpdatePostRequest
        {
            Title = "Updated by SDK",
            Content = "This post was updated and created using autogenerated sdk by refit",
        });

        var deletePost = await tweetbookApi.DeleteAsync(createdPost.Content.Data.Id);
    }
}